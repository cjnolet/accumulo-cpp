{"name":"Accumulo-cpp","tagline":"Accumulo++ - A C++ Implementation of the Accumulo Thrift Proxy","body":"Accumulo++\r\n==========\r\n\r\nA C++ library for Apache Accumulo\r\n\r\n## Why a C++ Library for Accumulo?\r\n\r\nSimple- When I'm running logic in InfoSphere Streams, I'd like to talk to Accumulo in C/C++. If I'm running code that needs to utilize CUDA and the GPU, I'd like to stay in C/C++ also. In Accumulo 1.5, we were given an Apache Thrift-based proxy that allows us to generate clients in differing languages. This is one such client which has been augmented to look as close as possible to the Java-based API that we've all come to know and love.\r\n\r\n## Requirements\r\n\r\n1. A running Accumulo cluster\r\n2. The new Accumulo Thrift Proxy server (1.6 included in this codebase)\r\n3. Thrift C++ library installed (http://thrift.apache.org/docs/install/)\r\n\r\n## Quick Start\r\n\r\n1. You'll need to run the Accumulo Thrift Proxy server. A jar is packaged with this codebase in order to get this started quickly. Locate the server/proxy.properties file and fill in the necessary fields. When you are done, start up the server by running the following:\r\n```\r\n./server/runProxy.sh\r\n```\r\n2. Build the example programs:\r\n```\r\nmake\r\n```\r\n3. Create an example table using the CreateTable example program\r\n```\r\n./target/CreateTableExample.o localhost 42424 root secret testTable\r\n```\r\n4. Run the BatchWriter example program to insert some rows into Accumulo:\r\n```\r\n./target/BatchWriterExample.o localhost 42424 root secret testTable row1 col1 qual6 U val\r\n```\r\n5. Run the Scanner example program to read rows from Accumulo:\r\n```\r\n./target/ScannerExample.o localhost 42424 root secret testTable A z\r\n```\r\n\r\n## Code Samples\r\n\r\n### BatchWriter Sample\r\n```c++\r\nConnector connector(\"localhost\", 42424, \"root\", \"secret\");\r\nBatchWriter writer = connector.createBatchWriter(\"testTable\", 500000, 10000, 10000, 2);\r\n\r\nMutation mutation(\"rowId\");\r\nmutation.put(\"colFam\", \"colQual\", \"colVis\", 500000, \"val\");\r\n\r\nwriter.addMutation(mutation);\r\nwriter.flush();\r\nwriter.close();\r\n\t\r\nconnector.close();\r\n```  \r\n\r\n### Scanner Sample\r\n\r\n```c++\r\nConnector connector(\"localhost\", 42424, \"root\", \"secret\");\r\n\r\nset<string> auths;\r\nauths.insert(\"U\");\r\n\t\r\nScanner scanner = connector.createScanner(\"testTable\", auths);\r\n\r\n// Set up the range\r\nKey start(\"A\");\r\nKey stop(\"z\");\r\nRange range(start, stop);\r\n\r\nscanner.setRange(range);\r\nscanner.fetchColumn(\"department\", \"1\");\r\n\r\nScannerIterator itr = scanner.iterator();\r\n\t\r\nwhile(itr.hasNext()) {\r\n\tKeyValue kv = itr.next();\r\n\r\n\tcout << kv.getKey().getRow() << \" \" << kv.getKey().getColFamily() << \":\" \r\n\t\t\t << kv.getKey().getColQualifier() << \" [\" << kv.getKey().getColVisibility() \r\n\t\t\t << \"] \" << kv.getKey().getTimestamp() << \"\\t\" << kv.getValue() << \"\\n\";\r\n\r\n}\r\n\t\r\nitr.close();\r\nconnector.close();\r\n```\r\n\r\n### BatchScanner Example\r\n\r\n```c++\r\n\r\nConnector connector(\"localhost\", 42424, \"root\", \"secret\");\r\n\r\nset<string> auths;\r\nauths.insert(\"U\");\r\n\t\r\nBatchScanner scanner = connector.createBatchScanner(\"testTable\", auths, 5);\r\n\t\r\n// construct ranges\r\nRange range1(new Key(\"A\"), new Key(\"Z\");\r\nRange range2(new Key(\"a\"), new Key(\"z\");\r\n\t\r\nvector<Range> ranges;\r\nranges.push_back(range1);\r\nranges.push_back(range2);\r\n\t\r\nscanner.setRanges(ranges);\r\nscanner.fetchColumn(\"department\", \"1\");\r\n\t\r\nBatchScannerIterator itr = scanner.iterator();\r\n\t\r\nwhile(itr.hasNext()) {\r\n\r\n\tKeyValue kv = itr.next();\r\n\r\n\tcout << kv.getKey().getRow() << \" \" << kv.getKey().getColFamily() << \":\" \r\n\t\t << kv.getKey().getColQualifier() << \" [\" << kv.getKey().getColVisibility() \r\n\t\t << \"] \" << kv.getKey().getTimestamp() << \"\\t\" << kv.getValue() << \"\\n\";\r\n\r\n}\r\n\t\r\nitr.close();\r\nconnector.close();\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}